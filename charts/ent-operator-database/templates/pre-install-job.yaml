apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      serviceAccountName: ops-manager
      containers:
      - name: mongocli-project-starter
        image: mongocli/mongocli 
        env:
        - name: MCLI_PUBLIC_API_KEY 
          valueFrom:
            secretKeyRef:
              name: ops-manager-ops-manager-admin-key
              key: user
        - name: MCLI_PRIVATE_API_KEY
          valueFrom:
            secretKeyRef:
              name: ops-manager-ops-manager-admin-key
              key: publicApiKey
        - name: MCLI_OPS_MANAGER_URL
          value: "http://ab56a3a2755244be7a93668ac77c2b26-358544467.us-east-1.elb.amazonaws.com:8080/"
        - name: MCLI_SERVICE
          value: ops-manager
        command: [ "/bin/bash", "-c" ]
        args:
        -  echo "mongocli-automation:start";
           ORG=$(mongocli iam organization create "{{ .Release.Name }}-org" --output json);
           echo "ORG=${ORG}";
           ID=$(echo "${ORG}" | jq -r '.id');
           echo "ID=${ID}";
           PRJ=$(mongocli iam projects create "{{ .Release.Name }}-project" --orgId "${ID}" --output json);
           echo "PRJ=${PRJ}";
           kubectl create configmap {{ .Release.Name }}-opsmanager-project --from-literal="baseUrl=${MCLI_OPS_MANAGER_URL}" --from-literal="projectName={{ .Release.Name }}-Project" --from-literal="orgId=${ORG}"; 
           kubectl get configmaps;
           PRJ_ID=$(echo "${PRJ}" | jq -r '.id')
           DESC="mongocli-automation"
           KEY=$(mongocli iam project apiKeys create --projectId "${PRJ_ID}" --role GROUP_OWNER --desc "${DESC}" --output json);
           echo "KEY=${KEY}";
           PUBLIC=$(echo "${KEY}" | jq -r '.publicKey');
           PRIVATE=$(echo "${KEY}" | jq -r '.privateKey');
           echo "PUBLIC=${PUBLIC}, PRIVATE=${PRIVATE}";
           kubectl create secret generic {{ .Release.Name }}-opsmanager-apikey --from-literal="user=${PUBLIC}" --from-literal="publicApiKey=${PRIVATE}";
           kubectl get secrets;
           echo "mongocli-automation:end";
